// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SignedCtrlPld struct{ capnp.Struct }

// SignedCtrlPld_TypeID is the unique identifier for the type SignedCtrlPld.
const SignedCtrlPld_TypeID = 0xc34ac578b174f099

func NewSignedCtrlPld(s *capnp.Segment) (SignedCtrlPld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedCtrlPld{st}, err
}

func NewRootSignedCtrlPld(s *capnp.Segment) (SignedCtrlPld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedCtrlPld{st}, err
}

func ReadRootSignedCtrlPld(msg *capnp.Message) (SignedCtrlPld, error) {
	root, err := msg.RootPtr()
	return SignedCtrlPld{root.Struct()}, err
}

func (s SignedCtrlPld) String() string {
	str, _ := text.Marshal(0xc34ac578b174f099, s.Struct)
	return str
}

func (s SignedCtrlPld) Blob() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SignedCtrlPld) HasBlob() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SignedCtrlPld) SetBlob(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SignedCtrlPld) Sign() (Sign, error) {
	p, err := s.Struct.Ptr(1)
	return Sign{Struct: p.Struct()}, err
}

func (s SignedCtrlPld) HasSign() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SignedCtrlPld) SetSign(v Sign) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSign sets the sign field to a newly
// allocated Sign struct, preferring placement in s's segment.
func (s SignedCtrlPld) NewSign() (Sign, error) {
	ss, err := NewSign(s.Struct.Segment())
	if err != nil {
		return Sign{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SignedCtrlPld_List is a list of SignedCtrlPld.
type SignedCtrlPld_List struct{ capnp.List }

// NewSignedCtrlPld creates a new list of SignedCtrlPld.
func NewSignedCtrlPld_List(s *capnp.Segment, sz int32) (SignedCtrlPld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SignedCtrlPld_List{l}, err
}

func (s SignedCtrlPld_List) At(i int) SignedCtrlPld { return SignedCtrlPld{s.List.Struct(i)} }

func (s SignedCtrlPld_List) Set(i int, v SignedCtrlPld) error { return s.List.SetStruct(i, v.Struct) }

func (s SignedCtrlPld_List) String() string {
	str, _ := text.MarshalList(0xc34ac578b174f099, s.List)
	return str
}

// SignedCtrlPld_Promise is a wrapper for a SignedCtrlPld promised by a client call.
type SignedCtrlPld_Promise struct{ *capnp.Pipeline }

func (p SignedCtrlPld_Promise) Struct() (SignedCtrlPld, error) {
	s, err := p.Pipeline.Struct()
	return SignedCtrlPld{s}, err
}

func (p SignedCtrlPld_Promise) Sign() Sign_Promise {
	return Sign_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type CtrlPld struct{ capnp.Struct }
type CtrlPld_Which uint16

const (
	CtrlPld_Which_unset     CtrlPld_Which = 0
	CtrlPld_Which_pcb       CtrlPld_Which = 1
	CtrlPld_Which_pathMgmt  CtrlPld_Which = 2
	CtrlPld_Which_sibra     CtrlPld_Which = 3
	CtrlPld_Which_drkeyMgmt CtrlPld_Which = 4
	CtrlPld_Which_sig       CtrlPld_Which = 5
	CtrlPld_Which_ack       CtrlPld_Which = 6
)

func (w CtrlPld_Which) String() string {
	const s = "unsetpcbpathMgmtsibradrkeyMgmtsigack"
	switch w {
	case CtrlPld_Which_unset:
		return s[0:5]
	case CtrlPld_Which_pcb:
		return s[5:8]
	case CtrlPld_Which_pathMgmt:
		return s[8:16]
	case CtrlPld_Which_sibra:
		return s[16:21]
	case CtrlPld_Which_drkeyMgmt:
		return s[21:30]
	case CtrlPld_Which_sig:
		return s[30:33]
	case CtrlPld_Which_ack:
		return s[33:36]

	}
	return "CtrlPld_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// CtrlPld_TypeID is the unique identifier for the type CtrlPld.
const CtrlPld_TypeID = 0x8e6af2c877489f54

func NewCtrlPld(s *capnp.Segment) (CtrlPld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return CtrlPld{st}, err
}

func NewRootCtrlPld(s *capnp.Segment) (CtrlPld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return CtrlPld{st}, err
}

func ReadRootCtrlPld(msg *capnp.Message) (CtrlPld, error) {
	root, err := msg.RootPtr()
	return CtrlPld{root.Struct()}, err
}

func (s CtrlPld) String() string {
	str, _ := text.Marshal(0x8e6af2c877489f54, s.Struct)
	return str
}

func (s CtrlPld) Which() CtrlPld_Which {
	return CtrlPld_Which(s.Struct.Uint16(0))
}
func (s CtrlPld) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s CtrlPld) SetPcb() {
	s.Struct.SetUint16(0, 1)

}

func (s CtrlPld) SetPathMgmt() {
	s.Struct.SetUint16(0, 2)

}

func (s CtrlPld) SetSibra() {
	s.Struct.SetUint16(0, 3)

}

func (s CtrlPld) DrkeyMgmt() (DRKeyMgmt, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != drkeyMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return DRKeyMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasDrkeyMgmt() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetDrkeyMgmt(v DRKeyMgmt) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDrkeyMgmt sets the drkeyMgmt field to a newly
// allocated DRKeyMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewDrkeyMgmt() (DRKeyMgmt, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewDRKeyMgmt(s.Struct.Segment())
	if err != nil {
		return DRKeyMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) SetSig() {
	s.Struct.SetUint16(0, 5)

}

func (s CtrlPld) SetAck() {
	s.Struct.SetUint16(0, 6)

}

func (s CtrlPld) ReqId() uint64 {
	return s.Struct.Uint64(8)
}

func (s CtrlPld) SetReqId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s CtrlPld) TraceId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s CtrlPld) HasTraceId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetTraceId(v []byte) error {
	return s.Struct.SetData(1, v)
}

// CtrlPld_List is a list of CtrlPld.
type CtrlPld_List struct{ capnp.List }

// NewCtrlPld creates a new list of CtrlPld.
func NewCtrlPld_List(s *capnp.Segment, sz int32) (CtrlPld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return CtrlPld_List{l}, err
}

func (s CtrlPld_List) At(i int) CtrlPld { return CtrlPld{s.List.Struct(i)} }

func (s CtrlPld_List) Set(i int, v CtrlPld) error { return s.List.SetStruct(i, v.Struct) }

func (s CtrlPld_List) String() string {
	str, _ := text.MarshalList(0x8e6af2c877489f54, s.List)
	return str
}

// CtrlPld_Promise is a wrapper for a CtrlPld promised by a client call.
type CtrlPld_Promise struct{ *capnp.Pipeline }

func (p CtrlPld_Promise) Struct() (CtrlPld, error) {
	s, err := p.Pipeline.Struct()
	return CtrlPld{s}, err
}

func (p CtrlPld_Promise) DrkeyMgmt() DRKeyMgmt_Promise {
	return DRKeyMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_df42b02816bdc1bf = "x\xdaL\x90Ak\x13A\x00\x85\xdf\x9b\xd9\xec&\x92" +
	"%;\xec*\x1e\x84@\xe9\xa1\x0a\x8a\x16O^\xd4\x96" +
	"\x82)D:Y=x\x92$\x1b\xd6\xd8m\\7+" +
	"\xd5\x93\x08\x9e=y\xf1\xe4_\xb0\xa7\x82PDD\x10" +
	"\xf1\xec\xd5\xab\x88\x82\x95\x08\xd5ZG&\xb6\xe8m\xf8" +
	"\xbe\xe11\xf3\x05\xef.\x08U\xd9\x04t\xb5\xe2\x9a+" +
	"O/\xad\xbf\xf9v\xf3\x11t\x83\xc2\xbcx\xb9ud" +
	"\xee\xd9\xc2\x07,\x09\xcf\x03\xd4\xc5\xe7\xaa\xe5\x01g\x96" +
	"\x0cA\xf3\xe4k\xb9q\xf7\xf5\xf2+\xa8\x06\xff]\xad" +
	"\x08\x0f\x08\xdb\xe2Sxmz\xba*\xd6A\xd3/\x8b" +
	"\xecz\x9e%<\xd5\xef\xe6\xa3\xfc\xdc\xe2\xf9\xb2\xc8V" +
	"\xb2d\x85\xd4\xb3\xd2\xa9\x1b\xe3\x10P_\xe6\x01\xfdQ" +
	"RO\x04}\xfe6\x11-\xdd\x9e\x01\xf4gI\xbd#" +
	"\xe8\x8b=\x13Q\x00\xea\xfb2\xa0'\x92\x1d\x0a\xfa\xf2" +
	"\x97\x89(\x01\xb5g\x17v$c\xc7bg\xd7Dt" +
	"\x80\x90\xec\x00\x1dJ\xc6u\xcb+?M\xc4\x0a\x10\xd6" +
	"8\x03\xc4\x8e\x15\x81\x15\xee\x0f\x13\xd1\x05B\x7f*\xaa" +
	"VD\x14T\x1e#\xda\xef(\xce\x03q\xdd\xf2\xa3\x96" +
	"W\x19\xb1\x0a\x84\x87\xb9\x00\xc4\x81\xe5\xc7(\xd8\xbc3" +
	"\x1a\x0fJ\xb8^\xde\xef\xc15y\xb7\xbc\xd1N\xd7J" +
	"\xc0k\x8e\x87\xbd\xa2\x0b\xd7$\xc5\xea\xe0^;]\x03" +
	"K\x06\xe6\xedv\xb8\xfb~sk\x03 \x03\xd0\x1b\x0f" +
	"S\xb8^\xb7\xbf\x0a\xb7Y\x0cn\xb7\x12\xd6 X\x03" +
	"\xef\x97E\xb7?h%\xf4!\xe8\xff\x97V\xec\xa7\x8d" +
	"\x87\xe9h\x90,\x96E\xe3 pU:\xc0\xb4\xef\xf1" +
	"\x13\x80\x9e\x95\xd4\xa7\x05\x15\xf97\xefI\x0b\xe7$\xf5" +
	"Y\xc1F/\xbb\xd5;\x98n\x8c\x87\xe9\x88\x819\xf4" +
	"\xe0\xf2$y\xdc~\xb8\xff\xb6?\x01\x00\x00\xff\xff!" +
	"N\x81\x0d"

func init() {
	schemas.Register(schema_df42b02816bdc1bf,
		0x8e6af2c877489f54,
		0xc34ac578b174f099)
}
